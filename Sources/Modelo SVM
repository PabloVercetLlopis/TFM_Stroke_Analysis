#Modelo Support Vector Machine linear

```{r}
modelo_svm = NULL

for (i in (1:10)){
  set.seed(i)
  train_row_numbers = createDataPartition(data$Stroke_diagnosis, p = 0.8, list = FALSE)
  data_train = data[train_row_numbers, ]
  data_test = data[-train_row_numbers, ]
  
  transformer = recipe(formula = Stroke_diagnosis ~ .,
                       data = data_train) %>%
  step_dummy(all_nominal_predictors()) %>%
  step_center(where(is.numeric)) %>%
  step_scale(where(is.numeric))
  

  prep_data = prep(transformer)
  data_train = bake(prep_data, new_data = data_train)
  data_test = bake(prep_data, new_data = data_test)
  
  ctrl = trainControl(method = "cv",
                      number = 10,
                      returnResamp = "final",
                      verboseIter = FALSE,
                      summaryFunction = twoClassSummary,
                      classProbs = TRUE,
                      savePredictions = T,
                      allowParallel = TRUE,
                      sampling = "up")
  
  
  tuneGrid = expand.grid(C = seq(0, 2, length = 20))

  set.seed(i)
  svm_fit = train(Stroke_diagnosis ~ .,
               data = data_train,
               method = "svmLinear",
               metric = "ROC",
               trControl = ctrl,
               tuneGrid = tuneGrid,
               )

  
  probs = seq(0.1, 0.9, by = 0.1)
  set.seed(i)
  ths_svm_fit = thresholder(svm_fit,
                                threshold = probs,
                                final = TRUE,
                                statistics = "all") 

  
  ths_svm_fit %>%
  mutate(prob = probs) %>%
  filter(J == max(J)) %>%
  pull(prob) -> thresh_prob_svm_fit
  ths_svm_fit %>%
  mutate(prob = probs) %>%
  filter(J == max(J)) %>%
  pull(J) -> max_J_train
  preds = as.factor(ifelse(predict(svm_fit, data_test, type = "prob")[,"Positive"] >= thresh_prob_svm_fit,"Positive","Negative"))
  real = factor(data_test$Stroke_diagnosis)
  cm = ConfusionTableR::binary_class_cm(preds,
                                        real,
                                        mode = 'everything',
                                        positive = 'Positive')
  
  
  sensitivity = cm$confusion_matrix$byClass[1]
  specificity = cm$confusion_matrix$byClass[2]
  df = data.frame(preds = preds, real = real)
  df$preds = as.numeric(ifelse(df$preds == "Positive", 1, 0))
  df$real = as.numeric(ifelse(df$real == "Positive", 1, 0))
  prediction = prediction(df$preds, df$real)
  AUC = as.numeric(performance(prediction,"auc")@y.values)
  row = data.frame(model = "SVM",
                   seed = i,
                   probab = thresh_prob_svm_fit,
                   max_J_train = max_J_train,
                   sensitivity = sensitivity,
                   specificity = specificity,
                   AUC = AUC)
  
  modelo_svm = rbind(modelo_svm, row)
  
}

modelo_svm %>% kable() %>% kable_styling()

```

###Guardar en excel
```{r}
write.xlsx(modelo_svm, "SVM_resultados_TFM.xlsx")
```
